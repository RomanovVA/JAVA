///////////////////////////////////////////////////////////////////////////////////////
//  П Р О Е К Т   (HIBERNATE + H2)   -   ГОТОВ, МОЖНО ПРОВЕРЯТЬ
///////////////////////////////////////////////////////////////////////////////////////

POM.XML:
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.geekbrains.training</groupId>
    <artifactId>homework</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <dependencies>
        <!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>5.4.4.Final</version>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.200</version>
        </dependency>
    </dependencies>
</project>




RESOURCE:  HIBERNATE.CFG.XML
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
        <property name="connection.driver_class">org.h2.Driver</property>
        <property name="connection.url">jdbc:h2:mem:mydatabase;MODE=PostgreSQL</property>
        <property name="connection.username">sa</property>
        <property name="connection.password"></property>
        <property name="connection.pool_size">8</property>
        <property name="dialect">org.hibernate.dialect.H2Dialect</property>
        <property name="show_sql">false</property>
        <property name="current_session_context_class">thread</property>

        <property name="hibernate.hbm2ddl.auto">create</property>

        <mapping class="com.geekbrains.training.homework.entities.Task"/>
    </session-factory>
</hibernate-configuration>




RESOURCE:  IMPORT.SQL
DROP TABLE tasks IF EXISTS;
CREATE TABLE IF NOT EXISTS tasks (id BIGSERIAL, title VARCHAR(255), owner VARCHAR(255), executor VARCHAR(255), description VARCHAR(255), status VARCHAR(255), PRIMARY KEY (id));




package com.geekbrains.training.homework.fonts;
public class Fonts {
    public enum Color {
        RESET("\033[0m"),

        // Regular Colors
        BLACK("\033[0;30m"),
        RED("\033[0;31m"),
        GREEN("\033[0;32m"),
        YELLOW("\033[0;33m"),
        BLUE("\033[0;34m"),
        MAGENTA("\033[0;35m"),
        CYAN("\033[0;36m"),
        WHITE("\033[0;37m"),

        // Bold
        BLACK_BOLD("\033[1;30m"),
        RED_BOLD("\033[1;31m"),
        GREEN_BOLD("\033[1;32m"),
        YELLOW_BOLD("\033[1;33m"),
        BLUE_BOLD("\033[1;34m"),
        MAGENTA_BOLD("\033[1;35m"),
        CYAN_BOLD("\033[1;36m"),
        WHITE_BOLD("\033[1;37m"),

        // Underline
        BLACK_UNDERLINED("\033[4;30m"),
        RED_UNDERLINED("\033[4;31m"),
        GREEN_UNDERLINED("\033[4;32m"),
        YELLOW_UNDERLINED("\033[4;33m"),
        BLUE_UNDERLINED("\033[4;34m"),
        MAGENTA_UNDERLINED("\033[4;35m"),
        CYAN_UNDERLINED("\033[4;36m"),
        WHITE_UNDERLINED("\033[4;37m"),

        // Background
        BLACK_BACKGROUND("\033[40m"),
        RED_BACKGROUND("\033[41m"),
        GREEN_BACKGROUND("\033[42m"),
        YELLOW_BACKGROUND("\033[43m"),
        BLUE_BACKGROUND("\033[44m"),
        MAGENTA_BACKGROUND("\033[45m"),
        CYAN_BACKGROUND("\033[46m"),
        WHITE_BACKGROUND("\033[47m"),

        // High Intensity
        BLACK_BRIGHT("\033[0;90m"),
        RED_BRIGHT("\033[0;91m"),
        GREEN_BRIGHT("\033[0;92m"),
        YELLOW_BRIGHT("\033[0;93m"),
        BLUE_BRIGHT("\033[0;94m"),
        MAGENTA_BRIGHT("\033[0;95m"),
        CYAN_BRIGHT("\033[0;96m"),
        WHITE_BRIGHT("\033[0;97m"),

        // Bold High Intensity
        BLACK_BOLD_BRIGHT("\033[1;90m"),
        RED_BOLD_BRIGHT("\033[1;91m"),
        GREEN_BOLD_BRIGHT("\033[1;92m"),
        YELLOW_BOLD_BRIGHT("\033[1;93m"),
        BLUE_BOLD_BRIGHT("\033[1;94m"),
        MAGENTA_BOLD_BRIGHT("\033[1;95m"),
        CYAN_BOLD_BRIGHT("\033[1;96m"),
        WHITE_BOLD_BRIGHT("\033[1;97m"),

        // High Intensity backgrounds
        BLACK_BACKGROUND_BRIGHT("\033[0;100m"),
        RED_BACKGROUND_BRIGHT("\033[0;101m"),
        GREEN_BACKGROUND_BRIGHT("\033[0;102m"),
        YELLOW_BACKGROUND_BRIGHT("\033[0;103m"),
        BLUE_BACKGROUND_BRIGHT("\033[0;104m"),
        MAGENTA_BACKGROUND_BRIGHT("\033[0;105m"),
        CYAN_BACKGROUND_BRIGHT("\033[0;106m"),
        WHITE_BACKGROUND_BRIGHT("\033[0;107m");

        private final String code;

        Color(String code) {
            this.code = code;
        }

        @Override
        public String toString() {
            return code;
        }
    }
}




package com.geekbrains.training.homework.exceptions;
public class TaskAlreadyExist extends RuntimeException {
    private Long id;
    private String title;

    public Long getId() {
        return id;
    }

    public String getTitle() {
        return title;
    }

    public TaskAlreadyExist(Long id, String title) {
        super("Ошибка: такая запись [id = " + id + ", title = " + title + "] уже существует!");
        this.id = id;
        this.title = title;
    }
}




package com.geekbrains.training.homework.exceptions;
public class TaskNoFound extends RuntimeException {
    public TaskNoFound(String message) {
        super("Ошибка: " + message + "!");
    }
}




package com.geekbrains.training.homework.entities;
import javax.persistence.*;
import java.io.Serializable;
@Entity
@Table(name="tasks")
public class Task implements Serializable { // для web-уровня
    public enum Status {
        CREATED("Создана"), IN_WORK("В работе"), CLOSED("Закрыта"), REJECTED("Отклонена"), SUSPENDED("Приостановлена");;

        private String rusTitle;

        Status(String rusTitle) {
            this.rusTitle = rusTitle;
        }

        public String getRusTitle() {
            return rusTitle;
        }
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // за генерацию id отвечает БД
    @Column (name = "id" )
    private Long id; // при создании = null, т.к. через конструктор не заполняем (поэтому тип - обёртка Long, а не примитив)
    @Column (name = "title" )
    private String title;
    @Column (name = "owner" )
    private String owner;
    @Column (name = "executor" )
    private String executor;
    @Column (name = "description" )
    private String description;
    @Column (name = "status" )
    private Status status;

    // дефолтный конструктор - для работы с hibernate
    public Task() {}

    @Override
    public String toString() {
        return String.format("Задача [id = %d, title = %s, owher = %s, executor = %s, description = %s, status = %s (%s)]", id, title, owner, executor, description, status, status.rusTitle);
    }

    // если переопределяем equals, то необходимо также синхронно переопределить hashCode
    @Override
    public boolean equals(Object o) {
        if (o == null || !(o instanceof Task)) {
            return false;
        }
        if (this == o) {
            return true;
        }
        Task another = (Task) o;
        return this.id.equals(another.id) && this.title.equals(another.title);
    }

    // если объекты равны по equals, то их hashCode тоже должны быть равны
    // если объекты НЕ равны по equals, то их hashCode желательно тоже НЕ должны совпадать
    @Override
    public int hashCode() {
        return id.intValue() + title.hashCode();
    }

    public Long getId() {
        return id;
    }

    public String getTitle() {
        return title;
    }

    public Status getStatus() {
        return status;
    }

    public String getOwner() {
        return owner;
    }

    public String getExecutor() {
        return executor;
    }

    public String getDescription() {
        return description;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public void setOwner(String owner) {
        this.owner = owner;
    }

    public void setExecutor(String executor) {
        this.executor = executor;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public void setStatus(Status status) {
        this.status = status;
    }
}




package com.geekbrains.training.homework;
import com.geekbrains.training.homework.entities.Task;
public interface TaskInterface {
    String getNameRepo();

    void prepare();

    void close();

    boolean isTaskExist(Long id);

    Task findTaskById(Long id);

    void addTask(String title, String owner, String executor, String description, Task.Status status);

    void editTask(Task newTask);

    void delTask(Long id);

    void deleteAll();

    void printList();
}




package com.geekbrains.training.homework.services;
import com.geekbrains.training.homework.TaskInterface;
import com.geekbrains.training.homework.entities.Task;
import com.geekbrains.training.homework.exceptions.TaskNoFound;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
public class TaskRepoHibernate implements TaskInterface {
    private SessionFactory factory = new Configuration()
            .configure("hibernate.cfg.xml")
            .buildSessionFactory();
    private Session session; // мост между приложением и Hibernate

    // конструктор
    TaskRepoHibernate() {
        prepare();
    }

    // описание репозитария
    @Override
    public String getNameRepo() {
        return "БД в памяти (JDBC.H2 + Hibernate)";
    }

    // подготовка репозитория
    @Override
    public void prepare() {
        this.factory = new Configuration()
                .configure("hibernate.cfg.xml")
                .buildSessionFactory();

        // [min;max) - генератор в диапазоне
        final int MIN = 0;
        final int MAX = 4;
        for (int i = 1; i < 21; i++) {
            addTask("Title" + i, "Owner" + i, "Executor" + i, "Description" + i, Task.Status.values()[(int) ((Math.random() * (MAX - MIN)) + MIN)]);
        }
    }

    // закрытие репозитория
    @Override
    public void close() {
        factory.close();
        if (session != null) {
            session.close();
        }
    }

    // проверить, что существует задача с заданным идентификатором
    @Override
    public boolean isTaskExist(Long id) {
        if (id == null) {
            throw new TaskNoFound("нельзя найти задачу - нет идентификатора");
        }

        Task task = new Task();
        try {
            openSession();
            task = session.get(Task.class, id);
        } finally {
            closeSession();
        }
        return task != null;
    }

    // найти задачу по идентификатору
    @Override
    public Task findTaskById(Long id) {
        if (id == null) {
            throw new TaskNoFound("нельзя найти задачу - нет идентификатора");
        }

        Task task = new Task();
        try {
            openSession();
            task = session.get(Task.class, id);
        } finally {
            closeSession();
        }
        return task;
    }

    // добавить новую задачу
    @Override
    public void addTask(String title, String owner, String executor, String description, Task.Status status) {
        if (title == null) {
            throw new TaskNoFound("нельзя добавить задачу - нет названия");
        }

        Task task = new Task();
        task.setTitle(title);
        task.setOwner(owner);
        task.setExecutor(executor);
        task.setDescription(description);
        task.setStatus(status);

        try {
            openSession();
            session.save(task);
        } finally {
            closeSession();
        }
    }

    // изменить задачу (указываем в sql-запросе не имя таблицы, а имя класса)
    @Override
    public void editTask(Task newTask) {
        if (newTask == null) {
            throw new TaskNoFound("нельзя редактировать задачу - объект пустой");
        }
        if (newTask.getId() == null) {
            throw new TaskNoFound("нельзя редактировать задачу - нет идентификатора");
        }
        if (newTask.getTitle() == null) {
            throw new TaskNoFound("нельзя редактировать задачу - нет названия");
        }
        if (!isTaskExist(newTask.getId())) {
            throw new TaskNoFound("не найдена задача с id = " + newTask.getId());
        }
        try {
            openSession();
            Task oldTask = session.createQuery("SELECT t FROM Task t WHERE t.id = :id", Task.class)
                    .setParameter("id", newTask.getId())
                    .getSingleResult();
            oldTask.setTitle(newTask.getTitle());
            oldTask.setOwner(newTask.getOwner());
            oldTask.setExecutor(newTask.getExecutor());
            oldTask.setDescription(newTask.getDescription());
            oldTask.setStatus(newTask.getStatus());
        } finally {
            closeSession();
        }
    }

    // удалить задачу
    @Override
    public void delTask(Long id) {
        if (id == null) {
            throw new TaskNoFound("нельзя удалить задачу - нет идентификатора");
        }
        if (!isTaskExist(id)) {
            throw new TaskNoFound("не найдена задача с id = " + id);
        }

        try {
            openSession();
            session.delete(session.get(Task.class, id));
        } finally {
            closeSession();
        }
    }

    // удалить все задачи
    @Override
    public void deleteAll() {
        try {
            openSession();
            session.createQuery("DELETE FROM Task").executeUpdate();
        } finally {
            closeSession();
        }
    }

    // получить список задач через коллекцию
    public List<Task> getTasks() {
        List<Task> tasks = new ArrayList<>();
        try {
            openSession();
            tasks = session.createQuery("SELECT t FROM Task t ORDER BY t.id").getResultList();
        } finally {
            closeSession();
        }
        return Collections.unmodifiableList(tasks);
    }

    // напечатать список задач
    @Override
    public void printList() {
        List<Task> tasks = getTasks();
        for (Task task : tasks) {
            System.out.println(task.toString());
        }
    }

    // создать задачу по данным
    public Task createTaskByInfo(String title, String owner, String executor, String description, Task.Status status) {
        Task task = new Task();
        task.setTitle(title);
        task.setOwner(owner);
        task.setExecutor(executor);
        task.setDescription(description);
        task.setStatus(status);

        return task;
    }

    // Session и EntityManager это единица работы, в данном случае на каждую операцию можно открывать и закрывать её, это не сильно затратно по ресурсам
    // открыть сессию с БД
    private void openSession() {
        session = factory.getCurrentSession();
        session.beginTransaction();
    }

    // закрыть сессию с БД
    private void closeSession() {
        session.getTransaction().commit();
        session.close();
    }
}




package com.geekbrains.training.homework.services;
import com.geekbrains.training.homework.entities.Task;
import com.geekbrains.training.homework.exceptions.TaskAlreadyExist;
import com.geekbrains.training.homework.exceptions.TaskNoFound;
import com.geekbrains.training.homework.fonts.Fonts;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;
import java.util.stream.Collectors;
public class TaskService {
    private final String delimiter = ";";
    private final String fileName = "Repository.csv";
    private TaskRepoHibernate taskRepository;

    // конструктор
    public TaskService() {
        taskRepository = new TaskRepoHibernate();
    }

    // описание репозитария
    public String getNameRepo() {
        return taskRepository.getNameRepo();
    }

    // проверить, что существует задача с заданным идентификатором
    public void isTaskExist(Long id) {
        try {
            if (taskRepository.isTaskExist(id)) {
                System.out.println(Fonts.Color.GREEN + "Задача найдена [id = " + id + "]" + Fonts.Color.RESET);
            } else {
                System.out.println(Fonts.Color.RED + "Задача отсутствует [id = " + id + "]!" + Fonts.Color.RESET);
            }
        } catch (TaskNoFound e) {
            System.out.println(Fonts.Color.RED + e.getMessage() + Fonts.Color.RESET);
        }
    }

    // найти задачу по идентификатору
    public Task findTaskById(Long id) {
        Task task = null;
        try {
            task = taskRepository.findTaskById(id);
            if (task == null) {
                System.out.println(Fonts.Color.RED + "Задача отсутствует [id = " + id + "]!" + Fonts.Color.RESET);
            } else {
                System.out.println(Fonts.Color.GREEN + "Задача найдена [id = " + id + "]!" + Fonts.Color.RESET);
            }
        } catch (TaskNoFound e) {
            System.out.println(Fonts.Color.RED + e.getMessage() + Fonts.Color.RESET);
        }
        return task;
    }

    // добавить новую задачу
    public void addTask(String title, String owner, String executor, String description, Task.Status status) {
        try {
            taskRepository.addTask(title, owner, executor, description, status == null ? Task.Status.CREATED : status);
            System.out.println(Fonts.Color.GREEN + "Задача успешно добавлена [title = " + title + "]" + Fonts.Color.RESET);
        } catch (TaskAlreadyExist | TaskNoFound e) {
            System.out.println(Fonts.Color.RED + e.getMessage() + Fonts.Color.RESET);
        }
    }

    // изменить задачу
    public void editTask(Task newTask) {
        try {
            taskRepository.editTask(newTask);
            System.out.println(Fonts.Color.GREEN + "Задача успешно обновлена [id = " + newTask.getId() + "]" + Fonts.Color.RESET);
        } catch (TaskNoFound e) {
            System.out.println(Fonts.Color.RED + e.getMessage() + Fonts.Color.RESET);
        }
    }

    // удалить задачу
    public void delTask(Long id) throws TaskNoFound {
        try {
            taskRepository.delTask(id);
            System.out.println(Fonts.Color.GREEN + "Задача успешно удалена [id = " + id + "]" + Fonts.Color.RESET);
        } catch (TaskNoFound e) {
            System.out.println(Fonts.Color.RED + e.getMessage() + Fonts.Color.RESET);
        }
    }

    // удалить все задачи
    public void deleteAll() {
        taskRepository.deleteAll();
    }

    // получить список задач через коллекцию
    public List<Task> getTasks() {
        return Collections.unmodifiableList(taskRepository.getTasks()); // чтобы никто не мог менять список
    }

    // напечатать список задач
    public void printList() {
        taskRepository.printList();
    }

    // создать задачу по данным
    public Task createTaskByInfo(String title, String owner, String executor, String description, Task.Status status) {
        return taskRepository.createTaskByInfo(title, owner, executor, description, status);
    }

    public void close() {
        taskRepository.close();
    }

    /////////////////////////////////////////////////////////////////////////////////
    // STREAM API
    /////////////////////////////////////////////////////////////////////////////////
    // получение списка задач по выбранному статусу
    public List<Task> streamTaskListByStatus(Task.Status status) {
        return Collections.unmodifiableList(taskRepository.getTasks().stream()
                .filter(task -> task.getStatus() == status)
                .collect(Collectors.toList()));
    }

    // проверка наличия задачи с указанным ID
    public boolean streamPrintTaskListByStatus(Long id) {
        if (id == null) {
            return false;
        }
        return taskRepository.getTasks().stream().anyMatch(task -> task.getId().equals(id));
    }

    // получение списка задач в отсортированном по статусу виде
    public List<Task> streamPrintTaskListSortByStatus() {
        return Collections.unmodifiableList(taskRepository.getTasks().stream()
                .sorted((o1, o2) -> o1.getStatus().compareTo(o2.getStatus()))
                .collect(Collectors.toList()));
    }

    // подсчёт количества задач по определенному статусу
    public long streamCountTasksByStatus(Task.Status status) {
        return taskRepository.getTasks().stream().filter((p) -> (p.getStatus() == status)).count();
    }


    /////////////////////////////////////////////////////////////////////////////////
    //  I / O
    /////////////////////////////////////////////////////////////////////////////////
    // записать задачи из репозитория в файл
    public int saveRepoToFile() {
        int countRows = 0;
        try {
            FileWriter writer = new FileWriter(fileName);
            for (Task task : taskRepository.getTasks()) {
                writer.write(task.getId() + delimiter + task.getTitle() + delimiter + task.getOwner() + delimiter + task.getExecutor() + delimiter + task.getDescription() + delimiter + task.getStatus());
                writer.write(System.getProperty("line.separator"));
                countRows++;
            }
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return countRows;
    }

    // прочитать задачи из файла и загрузить их в репозиторий
    public int readRepoFromFile() {
        int countRows = 0;
        try {
            FileReader fr = new FileReader(fileName);
            BufferedReader reader = new BufferedReader(fr);
            String line = null;
            while ((line = reader.readLine()) != null) {
                // читаем всю строку с разделителями
                StringTokenizer stk = new StringTokenizer(line, delimiter);
                // парсим
                //Long id = Long.valueOf(stk.nextToken());
                stk.nextToken(); // id автогенерируется в БД
                String title = stk.nextToken();
                String owner = stk.nextToken();
                String executor = stk.nextToken();
                String description = stk.nextToken();
                String status = stk.nextToken();
                addTask(title, owner, executor, description, Task.Status.valueOf(status));
                countRows++;
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return countRows;
    }
}




package com.geekbrains.training.homework;
import com.geekbrains.training.homework.entities.Task;
import com.geekbrains.training.homework.fonts.Fonts;
import com.geekbrains.training.homework.services.TaskService;
import java.util.List;
public class MainApp {
    public static void main(String[] args) {
        System.out.println("+-------------------------------+");
        System.out.println("| Создание репозитория          |");
        System.out.println("+-------------------------------+");
        TaskService taskService = new TaskService();
        System.out.println(taskService.getNameRepo());
        System.out.println("Создан список задач:");
        taskService.printList();
        System.out.println();

        System.out.println("+-----------------------------+");
        System.out.println("| Проверка поиска isTaskExist |");
        System.out.println("+-----------------------------+");
        taskService.isTaskExist(0L);
        taskService.isTaskExist(1L);
        taskService.isTaskExist(null);
        taskService.isTaskExist(2L);
        taskService.isTaskExist(888L);
        System.out.println();

        System.out.println("+------------------------------+");
        System.out.println("| Проверка поиска findTaskById |");
        System.out.println("+------------------------------+");
        taskService.findTaskById(null);
        taskService.findTaskById(1L);
        taskService.findTaskById(2L);
        taskService.findTaskById(888L);
        taskService.findTaskById(0L);
        System.out.println();

        System.out.println("+---------------------+");
        System.out.println("| Проверка добавления |");
        System.out.println("+---------------------+");
        taskService.addTask("Task1", "owner1", "executor1", "Create task 1", null);
        System.out.println("Повторное добавление такой же записи:");
        taskService.addTask("Task1", "owner1", "executor1", "Create task 1", null);
        System.out.println("Добавление title = NULL:");
        taskService.addTask(null, "owner10", "executor10", "Create task 10", null);
        taskService.printList();
        System.out.println();

        System.out.println("+---------------------+");
        System.out.println("| Проверка обновления |");
        System.out.println("+---------------------+");
        Task newTask = null;
        taskService.editTask(newTask);
        newTask = taskService.findTaskById(1L);
        newTask.setTitle("NewTitle1");
        newTask.setOwner("NewOwner1");
        newTask.setExecutor("NewExecutor1");
        newTask.setDescription("NewDescription1");
        newTask.setStatus(Task.Status.REJECTED);
        taskService.editTask(newTask);
        taskService.editTask(taskService.createTaskByInfo("Task_1", "Owner_1", "Executor_1", "Create task 1", Task.Status.CLOSED));
        taskService.printList();
        System.out.println();

        System.out.println("+-------------------+");
        System.out.println("| Проверка удаления |");
        System.out.println("+-------------------+");
        taskService.delTask(null);
        taskService.delTask(1L);
        taskService.printList();

        taskService.delTask(1L);
        taskService.printList();
        System.out.println();

        System.out.println("+-------------------------------------+");
        System.out.println("| Проверка добавления с переполнением |");
        System.out.println("+-------------------------------------+");
        for (int i = 1; i < 12; i++) {
            taskService.addTask("Task" + i, "NewOwner" + i, "NewExecutor" + i, "Create new task " + i, null);
        }
        taskService.printList();
        System.out.println();

        System.out.println("+-------------------------------------+");
        System.out.println("|       S T R E A M     A P I         |");
        System.out.println("+-------------------------------------+");
        System.out.println(Fonts.Color.BLUE + "ИСХОДНЫЙ СПИСОК ЗАДАЧ:" + Fonts.Color.RESET);
        taskService.printList();

        Task.Status status = Task.Status.CREATED;
        System.out.println(Fonts.Color.BLUE + "ЗАДАЧИ СО СТАТУСОМ: " + status.getRusTitle() + Fonts.Color.RESET);
        taskService.streamTaskListByStatus(status).forEach(System.out::println);
        status = Task.Status.IN_WORK;
        System.out.println(Fonts.Color.BLUE + "ЗАДАЧИ СО СТАТУСОМ: " + status.getRusTitle() + Fonts.Color.RESET);
        taskService.streamTaskListByStatus(status).forEach(System.out::println);
        status = Task.Status.CLOSED;
        System.out.println(Fonts.Color.BLUE + "ЗАДАЧИ СО СТАТУСОМ: " + status.getRusTitle() + Fonts.Color.RESET);
        taskService.streamTaskListByStatus(status).forEach(System.out::println);
        status = Task.Status.REJECTED;
        System.out.println(Fonts.Color.BLUE + "ЗАДАЧИ СО СТАТУСОМ: " + status.getRusTitle() + Fonts.Color.RESET);
        taskService.streamTaskListByStatus(status).forEach(System.out::println);
        status = Task.Status.SUSPENDED;
        System.out.println(Fonts.Color.BLUE + "ЗАДАЧИ СО СТАТУСОМ: " + status.getRusTitle() + Fonts.Color.RESET);
        taskService.streamTaskListByStatus(status).forEach(System.out::println);
        status = null;
        System.out.println(Fonts.Color.BLUE + "ЗАДАЧИ С ПУСТЫМ СТАТУСОМ:" + Fonts.Color.RESET);
        taskService.streamTaskListByStatus(status).forEach(System.out::println);
        System.out.println();

        System.out.println(Fonts.Color.BLUE + "ПРОВЕРКА ПОИСКА ЗАДАЧ ПО ID:" + Fonts.Color.RESET);
        Long id = 1L;
        if (taskService.streamPrintTaskListByStatus(id)) {
            System.out.println(Fonts.Color.GREEN + "Есть задача с id = " + id + Fonts.Color.RESET);
        } else {
            System.out.println(Fonts.Color.RED + "Нет задач с id = " + id + Fonts.Color.RESET);
        }
        id = 2L;
        if (taskService.streamPrintTaskListByStatus(id)) {
            System.out.println(Fonts.Color.GREEN + "Есть задача с id = " + id + Fonts.Color.RESET);
        } else {
            System.out.println(Fonts.Color.RED + "Нет задач с id = " + id + Fonts.Color.RESET);
        }
        id = 64L;
        if (taskService.streamPrintTaskListByStatus(id)) {
            System.out.println(Fonts.Color.GREEN + "Есть задача с id = " + id + Fonts.Color.RESET);
        } else {
            System.out.println(Fonts.Color.RED + "Нет задач с id = " + id + Fonts.Color.RESET);
        }
        System.out.println();

        System.out.println(Fonts.Color.BLUE + "СПИСОК ЗАДАЧ, ОТСОРТИРОВАННЫЙ ПО СТАТУСУ:" + Fonts.Color.RESET);
        List<Task> tasksByStatus = taskService.streamPrintTaskListSortByStatus();
        if (tasksByStatus.size() == 0) {
            System.out.println(Fonts.Color.RED + "Список получился пустым!" + Fonts.Color.RESET);
        } else {
            tasksByStatus.forEach(System.out::println);
        }
        System.out.println();

        System.out.println(Fonts.Color.BLUE + "КОЛИЧЕСТВО ЗАДАЧ ПО ЗАДАННОМУ СТАТУСУ:" + Fonts.Color.RESET);
        status = Task.Status.CREATED;
        System.out.println(status.getRusTitle() + " = " + taskService.streamCountTasksByStatus(status) + " задач");
        status = Task.Status.IN_WORK;
        System.out.println(status.getRusTitle() + " = " + taskService.streamCountTasksByStatus(status) + " задач");
        status = Task.Status.CLOSED;
        System.out.println(status.getRusTitle() + " = " + taskService.streamCountTasksByStatus(status) + " задач");
        status = Task.Status.REJECTED;
        System.out.println(status.getRusTitle() + " = " + taskService.streamCountTasksByStatus(status) + " задач");
        status = Task.Status.SUSPENDED;
        System.out.println(status.getRusTitle() + " = " + taskService.streamCountTasksByStatus(status) + " задач");
        System.out.println();

        System.out.println("+-------------------------------------+");
        System.out.println("|                 I / O               |");
        System.out.println("+-------------------------------------+");
        System.out.println(Fonts.Color.BLUE + "Список задач:" + Fonts.Color.RESET);
        taskService.printList();

        System.out.println("Записано в файл " + taskService.saveRepoToFile() + " строк.");
        System.out.println();

        System.out.println("Чистка репозитория.");
        taskService.deleteAll();
        System.out.println("Cписок задач в репозитории после чистки:");
        taskService.printList();
        System.out.println("-------");

        System.out.println("Загружено из файла " + taskService.readRepoFromFile() + " строк.");
        System.out.println();

        System.out.println(Fonts.Color.BLUE + "Список задач в репозитории после загрузки:" + Fonts.Color.RESET);
        taskService.printList();
        System.out.println();

        taskService.close();
    }
}